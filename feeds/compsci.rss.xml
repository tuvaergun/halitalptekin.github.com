<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>{ Halit Alptekin }</title><link>http://www.halitalptekin.com/</link><description></description><atom:link href="http://www.halitalptekin.com/feeds/compsci.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 02 Dec 2012 00:00:00 +0200</lastBuildDate><item><title>Floating Point Numbers</title><link>http://www.halitalptekin.com/floating-point-numbers.html</link><description>&lt;p&gt;Bu sene aldığım &lt;code&gt;Bilgisayarın Temelleri&lt;/code&gt; dersinde öğrendiğim güzel konulardan birisi de kayan noktalı sayıların bilgisayarda nasıl saklandığıdır. Aslında çok basit bir olay olmasına rağmen gerçekten de bana ilginç geldi. Yavaş yavaş bilgisayarın en temeline indikçe insan daha fazla etkileniyor.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Floating Numbers" src="http://farm4.staticflickr.com/3282/2814104146_82fe66b2a7_z.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Kayan noktalı sayılar bilgisayarda single, double ve quad olmak üzere farklı duyarlıklarda saklanabiliyor. Ben önce &lt;code&gt;single precision&lt;/code&gt; (tek duyarlıklı-32 bit) yöntemini göstermek istiyorum.&lt;/p&gt;
&lt;p&gt;Öncelikle elimizdeki sayıyı 10'luk tabandan 2'lik tabana dönüştürüyoruz. Bunu lisede öğrendiğimiz taban aritmetiği ile kolayca yapabilirsiniz.&lt;/p&gt;
&lt;p&gt;Örneğin elimizde &lt;code&gt;21,25&lt;/code&gt; sayısı olsun. Bunu bildiğimiz taban aritmetiği ile &lt;code&gt;10101.01&lt;/code&gt; ikilik sayısına çeviriyoruz.&lt;/p&gt;
&lt;p&gt;Şimdi bu elimizdeki sayıyı bilimsel gösterime göre düzenlememiz lazım. Bunun için sayıyı &lt;code&gt;1.010101x2^4&lt;/code&gt; gibi bir hale getiriyoruz. Burada yaptığımız işlem onluk tabanda yaptığımız bilimsel gösterimin tam olarak aynısı.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Not:&lt;/code&gt; Okuduğum birkaç yazıda; sayıları bu hale getirdiğimizde bütün sayıların &lt;code&gt;1.xxx&lt;/code&gt; gibi bir duruma geldiğini ve bunun da bit kazancı sağladığı yazıyordu.&lt;/p&gt;
&lt;p&gt;Şimdi elimizdeki sayıyı tek duyarlıklı olarak 32 bitte saklama kuralı olan &lt;code&gt;IEEE754&lt;/code&gt;'e göre aşağıdaki şekilde düzenleyelim. 64 bitte saklama olayı da bizim yaptığımıza çok benzese de arada bazı farklar vardır. Resimde &lt;code&gt;S&lt;/code&gt; işaret bitini, &lt;code&gt;E&lt;/code&gt; üssü &lt;code&gt;M&lt;/code&gt;'de mantissa yani değeri göstermekte.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IEEE754" src="http://1.bp.blogspot.com/-7gLr_0Pxfps/T41xoHWw0KI/AAAAAAAABJk/T9UJa5Qh6VI/s1600/float.png" /&gt;&lt;/p&gt;
&lt;p&gt;Resme göre 1 bit işaret, 8 bit üs ve 23 bit sayının değeri için kullanmamız gerekiyor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 bit işaret;&lt;/code&gt; sayımız pozitif olduğu için direk olarak 0 değerini alıyor. Eğer negatif olsa 1 değerini alacaktı.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;8 bit üs;&lt;/code&gt; Buraya az önce bilimsel hale getirdiğimiz sayının &lt;code&gt;(1.010101x2^4&lt;/code&gt;) üssüne &lt;code&gt;2^(w - 1) - 1&lt;/code&gt; ekleyip oluşan değeri yazacağız. Bizim 32 bitte w değerimiz 8'dir. Eğer farklı bir bit alanında saklasaydık o zaman bu değere göre ekleme yapmamız gerekecekti. Biz şimdi elimizdeki sayının üssü olan 4 değerine &lt;code&gt;2^(8-1)&lt;/code&gt; den gelen değer olan &lt;code&gt;127&lt;/code&gt; ekleyip oluşan 131 sayısını ikilik tabana çevirip 8 bitlik kısma yazıyoruz. &lt;code&gt;10000011&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;23 bit değer(mantissa);&lt;/code&gt; Bu kısma sayılar &lt;code&gt;1.010101&lt;/code&gt; gibi bir durumda iken baştaki bir değerini atarak oluşan değeri yazıyoruz. Yani elimizdeki değere göre &lt;code&gt;010101&lt;/code&gt; yazmamız gerekiyor. Kurala göre bu alan bize 23 bit sağladığı için geri kalan kısımları 23 bit olana kadar 0 ile dolduruyoruz. Sayımızın son durumu &lt;code&gt;01010100000000000000000&lt;/code&gt; oluyor.&lt;/p&gt;
&lt;p&gt;Şimdi elimizdeki değerleri birleştirelim:&lt;code&gt;0 10000011 01010100000000000000000&lt;/code&gt;. Artık bilgisayarımız &lt;code&gt;21,25&lt;/code&gt; sayısını 32 bit'te &lt;code&gt;01000001101010100000000000000000&lt;/code&gt; olarak saklıyor.&lt;/p&gt;
&lt;p&gt;Aslında olay temel olarak böyle olsa da işin içine girince çok fazla detay ile karşılaşıyorsunuz. Eğer bu konu sizinde ilginizi çektiyse veya ders/proje gibi gereklilikleriniz varsa aşağıya yazacağım kaynaklar ile araştırmanıza devam edebilirsiniz.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buradan Devam&lt;/strong&gt;: &lt;a href="http://www.bilgisayarkavramlari.com/2008/11/30/kayan-nokta-sayilari-floating-point-numbers"&gt;[1]&lt;/a&gt; &lt;a href="http://www.cs.utah.edu/~zachary/isp/applets/FP/FP.html"&gt;[2]&lt;/a&gt; &lt;a href="http://babbage.cs.qc.cuny.edu/IEEE-754.old/Decimal.html"&gt;[3]&lt;/a&gt; &lt;a href="http://babbage.cs.qc.cuny.edu/IEEE-754/"&gt;[4]&lt;/a&gt; &lt;a href="http://www.madirish.net/240"&gt;[5]&lt;/a&gt; &lt;a href="http://www.cprogramming.com/tutorial/floating_point/understanding_floating_point_representation.html"&gt;[6]&lt;/a&gt; &lt;a href="http://class.ece.iastate.edu/arun/CprE281_F05/ieee754/ie5.html"&gt;[7]&lt;/a&gt; &lt;a href="http://grouper.ieee.org/groups/754/"&gt;[8]&lt;/a&gt; &lt;a href="http://en.wikipedia.org/wiki/IEEE_754-1985#Representation_of_numbers"&gt;[9]&lt;/a&gt; &lt;a href="http://www.eksisozluk.com/show.asp?t=floating+point"&gt;[10]&lt;/a&gt; &lt;a href="http://support.microsoft.com/kb/42980/en-us"&gt;[11]&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">halit</dc:creator><pubDate>Sun, 02 Dec 2012 00:00:00 +0200</pubDate><guid>tag:www.halitalptekin.com,2012-12-02:floating-point-numbers.html</guid><category>float numbers</category><category>kayan noktalı sayılar</category><category>ieee754</category></item></channel></rss>